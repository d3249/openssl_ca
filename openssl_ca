#!/bin/bash

#The MIT License (MIT)
#
#Copyright (c) <2016> <edgar.a.ramos.rambaud@gmail.com>
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

#############
# constants #
#############

tarfile="config.tar.gz"

config_file="config"

root_config="openssl_root.cnf"
root_basename="root"

intermediate_config="openssl_intermediate.cnf"
intermediate_basename="intermediate"

third_party_dir="others"

ca_keysize=4096
others_keysize=2048

root_ca_validity=7300 #days
intermediate_ca_validity=3650 #days
others_validity=365 #days

if [[ -d "$config_file" ]];
then
    
    root_dir=`grep -E "(^dir)" config/$root_config | sed -r -e 's|^.*=\s*(.*)|\1|'`
    root_key=`grep -E "(^private_key)" config/$root_config | sed -r -e 's|^.*=\s*(.*)|\1|' -e 's|\\$dir|'\$(echo $root_dir)'|'`
    root_cer=`grep -E "(^certificate)" config/$root_config | sed -r -e 's|^.*=\s*(.*)|\1|' -e 's|\\$dir|'\$(echo $root_dir)'|'`

    intermediate_dir=`grep -E "(^dir)" config/$intermediate_config | sed -r -e 's|^.*=\s*(.*)|\1|'`
    intermediate_key=`grep -E "(^private_key)" config/$intermediate_config | sed -r -e 's|^.*=\s*(.*)|\1|' -e 's|\\$dir|'\$(echo $intermediate_dir)'|'`
    intermediate_cer=`grep -E "(^certificate)" config/$intermediate_config | sed -r -e 's|^.*=\s*(.*)|\1|' -e 's|\\$dir|'\$(echo $intermediate_dir)'|'`
fi

#############
# functions #
#############
function usage {
    echo "Usage: openssl_ca [ prepare | ca | server | client | sign CSR_FILE [ server | client ] | export ID]"    
    exit 1
}

function fail {
    echo "$1"
    exit 2
}

function untar {
    if [[ -f $tarfile ]];
    then
	if [[ -d $config_file ]];
	then	    	       
	    echo "INFO:: directory $config_file already exist"
	else	    	   
	    tar xf $tarfile
	fi	
    else
	fail "Tarfile ($tarfile) not found"
    fi    
}

function create_structure {
    mkdir -p "$1/certs" "$1/crl" "$1/newcerts" "$1/private" "$1/csr"
    chmod 700 "$1/private"
    touch "$1/index.txt"
    echo "1000" > "$1/serial"
}

function check_dir {
    if [[ ! -d $1 ]];      
    then	
	mkdir -p $1	
    fi    
}

function create_key {
    if [[ -f "$1/private/$2_private.key.pem" ]];
    then      
	echo "INFO::$1/private/$2_private.key.pem already exist"
    else
	check_dir "$1/private"
	   
	openssl genrsa -aes256 -out "$1/private/$2_private.key.pem" $3
	chmod 400 "$1/private/$2_private.key.pem"
    fi
}

function create_ca_cer {
    if [[ -f "$1/certs/public.cer.pem" ]];       
    then      
	echo "INFO::$1/certs/public.cer.pem already exist"
    else	
	openssl req -config "$2" -key "$root_key" -new -x509 -days $root_ca_validity -sha256 -extensions v3_ca -out "$root_cer"	
    fi    
	
}

function create_csr {
    if [[ -f "$1/csr/$2_public.csr.pem" ]];
    then
	echo "INFO::$1/csr/$2_public.csr.pem already exist"
    else
	check_dir "$1/csr"
	
	openssl req -config $3 -new -sha256 -key "$1/private/$(echo $2)_private.key.pem" -out "$1/csr/$(echo $2)_public.csr.pem"
    fi    
}

function sign {
    if [[ -f "$2" ]];
    then
	echo "INFO::$2 already exist"
    else
	check_dir $2
	
	openssl ca -config $4 -extensions $5 -days $6 -notext -md sha256 -in $1 -out $2/$3
    fi    
}

function create_chain {
    cat $2 $3 > $1
}

function check_config {
    if [[ ! -d "$config_file" ]];
    then
	fail "No $config_file directory found"
    fi    
}

#############




if [[ $# < 1 ]];
then    
    usage    
fi

option=$1

if [[ "$option" == "ca" ]];
then

    check_config
    
    echo "Creating root and intermediate certificates"
    echo "Creating root CA directory structure"
    create_structure $root_dir
    echo "Creating root CA key"
    create_key $root_dir $root_basename $ca_keysiza
    echo "Creating root CA certificate"
    create_ca_cer $root_dir config/$root_config

    echo "Creating intermediate CA directory structure"
    create_structure $intermediate_dir
    echo "Creating intermediate CA key"
    create_key $intermediate_dir $intermediate_basename $ca_keysize
    echo "Creating intermediate CA CSR file"    
    create_csr $intermediate_dir $intermediate_basename config/$intermediate_config
    echo "Creating intermediate CA signed certificate"    
    sign $intermediate_dir/csr/$(echo $intermediate_basename)_public.csr.pem $intermediate_dir/certs/ $(echo $intermediate_basename)_public.cer.pem config/$root_config "v3_intermediate_ca" $intermediate_ca_validity
    create_chain "$intermediate_dir/certs/chain.cer.pem" "$intermediate_dir/certs/$(echo $intermediate_basename)_public.cer.pem" "$root_dir/certs/$(echo $root_basename)_public.cer.pem"
elif [[ "$option" == "prepare" ]];
then
    echo "Extractig configuration files"
    untar        
elif [[ "$option" == "server" ]];
then
    
    check_config
    
    echo "Creating key and CSR for a thirh party"
    index=$RANDOM
    echo "Creating key"
    create_key $third_party_dir $index $others_keysize
    echo "Creating CSR file"    
    create_csr $third_party_dir $index config/$intermediate_config
    echo "Creating certificate"    
    sign $third_party_dir/csr/$(echo $index)_public.csr.pem $third_party_dir/certs/ $(echo $index)_public.cer.pem config/$intermediate_config "server_cert" $others_validity
    echo "Creating chained certificate"    
    create_chain $third_party_dir/certs/$(echo $index)_chain.pem $third_party_dir/certs/$(echo $index)_public.cer.pem $intermediate_dir/certs/chain.cer.pem
    echo "Generated ID $index"
elif [[ "$option" == "client" ]];     
then
    
    check_config

    echo "Creating key and CSR for a thirh party"
    index=$RANDOM
    echo "Creating key"
    create_key $third_party_dir $index $others_keysize
    echo "Creating CSR file"    
    create_csr $third_party_dir $index config/$intermediate_config
    echo "Creating certificate"    
    sign $third_party_dir/csr/$(echo $index)_public.csr.pem $third_party_dir/certs/ $(echo $index)_public.cer.pem config/$intermediate_config "usr_cert" 365
    echo "Creating chained certificate"    
    create_chain $third_party_dir/certs/$(echo $index)_chain.pem $third_party_dir/certs/$(echo $index)_public.cer.pem $intermediate_dir/certs/chain.cer.pem
    echo "Generated ID $index"
elif [[ "$option" == "sign" ]];
then
    
    check_config
    
    if [[ "$3" == "server" ]];
    then
	permission="server_cert"
    elif [[ "$3" == "client" ]];
    then
	permission="usr_cert"
    else
	fail "Unknown sign option"
    fi
    	 
    echo "Signing certificate"
    sign $2 $third_party_dir/certs/ $(echo $2)_signed.cer.pem config/$intermediate_config $permission $others_validity
    
elif [[ "$option" == "export" ]];
then
    echo "Exporting"
    mkdir exported
    find -regextype posix-egrep -regex ".*$2.*(cer|key)\.pem$" | xargs -I {} cp {} exported/
    ls exported/*.pem | xargs -n 1 chmod 650 
    tar czf $(echo $2)_exported.tar.gz exported/
    rm -r exported
else
    fail "Unknown command"
fi

exit 0
